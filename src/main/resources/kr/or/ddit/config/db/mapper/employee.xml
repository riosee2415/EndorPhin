<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="employee">

	<!-- 사원 입력 -->
	<insert id="insertEmployee" parameterType="employeeVo">
		insert into employee
		(userid, usernm, deptcode, positioncode, rankcode, continuousyear,
		 relate, joincompany, birthdate, password)
		values
		(
		#{userId},
		#{userNm},
		nvl(#{deptCode, jdbcType=VARCHAR},null),
		nvl(#{positionCode, jdbcType=VARCHAR},null),
		nvl(#{rankCode, jdbcType=VARCHAR},null),
		nvl(#{continuousYear, jdbcType=VARCHAR},null),
		nvl(#{relate, jdbcType=VARCHAR},null),
		sysdate,
		to_date(#{birthDate},'yyyyMMdd'),
		nvl(#{password, jdbcType=VARCHAR},null)
		)

	</insert>

	<!-- 사원 전체 불러오기 -->
	<!-- <select id="getAllEmployee" resultType="employeeVo">
		select
		userid, usernm, deptcode, positioncode, rankcode, continuousyear,
		 relate, joincompany, birthdate, password
		from employee
	</select> -->
	
	
	<!-- 사원 전체 불러오기 -->
	 <select id="getAllEmployee" resultType="employeeVo">
		select
      a.userid,
        a.usernm,
        b.positionname positionname,
        c.deptname deptname,
        d.positionname rankname,
        a.continuousyear,
        a.relate,
        to_char(a.joincompany,'yyyy-MM-dd') joincompany,
        to_char(a.birthdate,'yyyy-MM-dd') birthdate,
        password
      from employee a left outer join position b
      on
      a.positioncode = b.positioncode
      left outer join dept c
      on
        a.deptcode = c.deptcode
    left outer join position d
        on
        a.rankcode = d.positioncode
	
	</select> 


	<!-- 사원 선택하여 가져오기 -->
	<select id="selectEmployee" resultType="employeeVo"
		parameterType="map">
		select
      a.userid,
        a.usernm,
        a.deptcode,
        a.positioncode,
        a.rankcode,
        b.positionname positionname,
        c.deptname deptname,
        d.positionname rankname,
        a.continuousyear,
        a.relate,
        to_char(a.joincompany,'yyyy-MM-dd') joincompany,
        to_char(a.birthdate,'yyyy-MM-dd') birthdate,
        password
      from employee a left outer join position b
      on
      a.positioncode = b.positioncode
      left outer join dept c
      on
        a.deptcode = c.deptcode
    left outer join position d
        on
        a.rankcode = d.positioncode
		
		
		
		 where userid = #{userid}
	</select>


	<!-- 사원 삭제 -->
	<delete id="deleteEmployee" parameterType="map">
		delete from employee
		where userid = #{userid}
	</delete>
	
	
			<!-- 사원 업데이트 -->
			<update id="updateEmployee" parameterType="employeeVo">
			update employee set
			userNm=#{userNm},
			deptCode=#{deptCode},
			positionCode=#{positionCode},
			rankCode=#{rankCode},
			continuousyear=nvl(#{continuousYear,jdbcType=VARCHAR},continuousYear),
			relate=nvl(#{relate,jdbcType=VARCHAR},relate),
			joinCompany=nvl(#{joinCompany,jdbcType=VARCHAR},joinCompany),
			birthDate=to_date(#{BirthDate},'yyyy-MM-dd'),
			password=nvl(#{password,jdbcType=VARCHAR},password)
			where userId=#{userId}
			</update>
			
			
			
			
			
			<!-- 사원 선택하여 가져오기 -->
	<select id="SearchEmployee" resultType="employeeVo"
		parameterType="map">
		select
     	a.userid,
        a.usernm,
        a.deptcode,
        a.positioncode,
        a.rankcode,
        b.positionname positionname,
        c.deptname deptname,
        d.positionname rankname,
        a.continuousyear,
        a.relate,
        to_char(a.joincompany,'yyyy-MM-dd') joincompany,
        to_char(a.birthdate,'yyyy-MM-dd') birthdate,
        password
      from employee a left outer join position b
      on
      a.positioncode = b.positioncode
      left outer join dept c
      on
        a.deptcode = c.deptcode
    left outer join position d
        on
        a.rankcode = d.positioncode
		
		 where userNm = #{usernm}
	</select>
	
	<!-- 사원 이름으로 검색 -->
	<select id="selectUserByNm" resultType="employeeVo" parameterType="map">
		select  userid,usernm,deptcode,positioncode,rankcode,continuousyear,relate
        ,joincompany,birthdate,password
		from    employee
		where   usernm like '%' ||#{usernm} ||'%'
	</select>












</mapper>



